package com.example.kutergindaniil2611019;

public class Test {
//    2.7.1. Контекст в Android
//    Ранее в курсе понятие контекста уже встречалось. Например, когда необходимо вывести всплывающее сообщение:
//
//            Toast.makeText(this,”qwert”,Toast.LENGTH_SHORT).show();
//    Класс android.context.Context представляет из себя интерфейс для доступа к глобальной информации об окружении приложения. Это абстрактный класс, реализация которого обеспечивается системой Android.
//
//    Context позволяет получить доступ к ресурсам и классам данного приложения, а также необходим для вызова операций на уровне приложения, таких как запуск активностей (Activity), отправка широковещательных сообщений, получение намерений (Intent) и прочее.
//
//    Данный класс также является базовым для классов Activity, Application и Service.
//
//    Получить доступ к контексту можно с помощью методов getApplicationContext, getContext, getBaseContext, а также просто с помощью свойства this (изнутри активности или сервиса).
//
//    Именно Context является родительским классом для Activity, Service, что является отличным примером применения наследования в Android-разработке.
//
//    Объект Context часто применяется в программировании под Android.
//
//    Для динамического пользовательского интерфейса, создания новых объектов, адаптеров и т. д.
//            TextView myTextView = new TextView(this);
//    ListAdapter adapter = new SimpleCursorAdapter(getApplicationContext(),...);
//    Для доступа к стандартным глобальным ресурсам.
//    //Доступ из класса Activity -- наследника Context
//    getSystemService(LAYOUT_INFLATER_SERVICE);
//    //Доступ с использованием Контекста Приложения
//    SharedPreferences prefs = getApplicationContext().
//            getSharedPreferences("PREFS", MODE_PRIVATE);
//    В Android существует несколько видов контекста, отличающихся длительностью жизненного цикла, а также областью применимости. Неоправданное использование контекста с более длительным жизненным циклом может привести к утечке ресурсов в приложении.
}
